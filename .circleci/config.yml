version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2


parameters:
  memstash_token:
    type: string
    default: "f56c43a6-ae90-4ee0-b313-06aaf504c7fc"
  stack_name:
    type: string
    default: "capstone-eks-${CIRCLE_WORKFLOW_ID:0:7}"
  cluster_name:
    type: string
    default: EKS
  default_region:
    type: string
    default: us-west-2
  resources_id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"


commands:
  destroy-eks:
    description: Destroy eks cluster cloudformation stack
    parameters:
      stack_to_destroy:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy eks cluster "<<parameters.stack_to_destroy>>"
          when: on_fail
          command: |
            aws cloudformation delete-stack --region us-west-2 --stack-name "<<parameters.stack_to_destroy>>"
  delete-ecr:
    description: Delete ecr container
    parameters:
      repo_to_delete:
        type: string
        default: "on_fail"
      tag_to_delete:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Delete ecr container "<<parameters.repo_to_delete>>"
          when: on_fail
          command: |
            aws ecr batch-delete-image --region "<< pipeline.parameters.default_region >>" --repository-name "<<parameters.repo_to_delete>>" --image-ids imageTag="<<parameters.tag_to_delete>>"


jobs:
  ########### Build Heroes Service ###########
  build-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Build Heroes Service
          command: |
            cd heroes
            npm i
      - save_cache:
          paths: [heroes/node_modules]
          key: heroes-build

  ########### Build Threats Service ###########
  build-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Build Threats Service
          command: |
            cd threats
            npm i
      - save_cache:
          paths: [threats/node_modules]
          key: threats-build

  ########### Lint Heroes Service ###########
  lint-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Lint Heroes Service
          command: |
            cd heroes
            npm run lint

  ########### Lint Threats Service ###########
  lint-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Lint Threats Service
          command: |
            cd threats
            npm run lint
  
  ########### Create and Deploy EKS Infrastructure #############
  deploy-eks-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update zip
      - run:
          name: Deploy EKS cluster
          no_output_timeout: 30m
          command: | 
            aws cloudformation deploy \
              --stack-name "<< pipeline.parameters.stack_name >>" \
              --template-file .circleci/iac_files/eks.yml \
              --parameter-overrides ID="<< pipeline.parameters.resources_id >>" \
              --region="<< pipeline.parameters.default_region >>" \
              --capabilities "CAPABILITY_NAMED_IAM"
      - run:
          name: Check status of EKS cluster
          command: |
            aws eks --region "<< pipeline.parameters.default_region >>" describe-cluster \
              --name "<< pipeline.parameters.cluster_name >>" \
              --query "cluster.status" \
              --output text
      - run:
          name: Get the kubeconfig file
          command: export KUBECONFIG=$HOME/.kube/kubeconfig && aws eks --region "<< pipeline.parameters.default_region >>" update-kubeconfig --name "<< pipeline.parameters.cluster_name >>" 
      - destroy-eks:
          stack_to_destroy: "<< pipeline.parameters.stack_name >>"
      - delete-ecr:
          repo_to_delete: heroes
          tag_to_delete: "latest-${CIRCLE_BUILD_NUM}"
  
  deploy-services:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "<< pipeline.parameters.cluster_name >>"
          install-kubectl: true
          kubeconfig-file-path: $HOME/.kube/kubeconfig
          aws-region: "<< pipeline.parameters.default_region >>"
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: .circleci/kub_deploy_files/heroes-service-deployment.yml
          resource-name: deployment/heroes-service
    
  test-deploy-service:
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "<< pipeline.parameters.cluster_name >>"
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl describe service heroes-service
            kubectl get services -o wide
      - destroy-eks:
          stack_to_destroy: "<< pipeline.parameters.stack_name >>"
      - delete-ecr:
          repo_to_delete: heroes
          tag_to_delete: "latest-${CIRCLE_BUILD_NUM}"


workflows:
  default:
    jobs:
      - build-heroes-service
      - build-threats-service
      - lint-heroes-service:
          requires: [build-heroes-service]
      - lint-threats-service:
          requires: [build-threats-service]
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ./heroes
          region: AWS_REGION
          repo: heroes
          skip-when-tags-exist: false
          tag: "latest-$CIRCLE_BUILD_NUM"
          requires: [lint-heroes-service, lint-threats-service]
      - deploy-eks-infrastructure:
          requires: [aws-ecr/build-and-push-image]
      - deploy-services:
          requires: [deploy-eks-infrastructure]
      - test-deploy-service:
          requires: [deploy-services]
