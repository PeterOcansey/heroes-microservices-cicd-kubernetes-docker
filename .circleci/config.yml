version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2


parameters:
  memstash_token:
    type: string
    default: "f56c43a6-ae90-4ee0-b313-06aaf504c7fc"
  stack_name:
    type: string
    default: "capstone-eks-${CIRCLE_WORKFLOW_ID:0:7}"
  cluster_name:
    type: string
    default: "EKS-${CIRCLE_WORKFLOW_ID:0:7}"
  default_region:
    type: string
    default: us-west-2
  resources_id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"


commands:
  destroy-eks:
    description: Destroy eks cluster cloudformation stack
    parameters:
      stack_to_destroy:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy eks cluster "<<parameters.stack_to_destroy>>"
          when: on_fail
          command: |
            aws cloudformation delete-stack --region "<< pipeline.parameters.default_region >>" --stack-name "<<parameters.stack_to_destroy>>"
  delete-ecr:
    description: Delete ecr container
    parameters:
      repo_to_delete:
        type: string
        default: "on_fail"
      tag_to_delete:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Delete ecr container "<<parameters.repo_to_delete>>"
          when: on_fail
          command: |
            aws ecr batch-delete-image --region "<< pipeline.parameters.default_region >>" --repository-name "<<parameters.repo_to_delete>>" --image-ids imageTag="<<parameters.tag_to_delete>>"


jobs:
  ########### Build Heroes Service ###########
  build-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Build Heroes Service
          command: |
            cd heroes
            npm i
      - save_cache:
          paths: [heroes/node_modules]
          key: heroes-build

  ########### Build Threats Service ###########
  build-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Build Threats Service
          command: |
            cd threats
            npm i
      - save_cache:
          paths: [threats/node_modules]
          key: threats-build

  ########### Lint Heroes Service ###########
  lint-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Lint Heroes Service
          command: |
            cd heroes
            npm i
            npm run lint

  ########### Lint Threats Service ###########
  lint-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Lint Threats Service
          command: |
            cd threats
            npm i
            npm run lint
  
  ########### Create and Deploy EKS Infrastructure #############
  deploy-eks-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy EKS cluster
          no_output_timeout: 30m
          command: | 
            aws cloudformation deploy \
              --stack-name "<< pipeline.parameters.stack_name >>" \
              --template-file .circleci/iac_files/eks.yml \
              --parameter-overrides ID="<< pipeline.parameters.resources_id >>", CLUSTERNAME="<< pipeline.parameters.cluster_name >>" \
              --region="<< pipeline.parameters.default_region >>" \
              --capabilities "CAPABILITY_NAMED_IAM"
      - run:
          name: Check status of EKS cluster
          command: |
            aws eks --region "<< pipeline.parameters.default_region >>" describe-cluster \
              --name "<< pipeline.parameters.cluster_name >>" \
              --query "cluster.status" \
              --output text
      - destroy-eks:
          stack_to_destroy: "<< pipeline.parameters.stack_name >>"
      - delete-ecr:
          repo_to_delete: heroes
          tag_to_delete: "latest-${CIRCLE_BUILD_NUM}"
  
  ########### Deploy Heroes & Threats Services ##############
  deploy-services:
    executor: aws-eks/python3
    steps:
      - checkout
      - run: pip install awscli
      - run:
          name: Get the kubeconfig file
          command: |
            echo $HOME
            export KUBECONFIG=$HOME/.kube/config && aws eks --region "<< pipeline.parameters.default_region >>" update-kubeconfig --name "<< pipeline.parameters.cluster_name >>" 
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "<< pipeline.parameters.cluster_name >>"
          install-kubectl: true
          kubeconfig-file-path: $HOME/.kube/config
          aws-region: "<< pipeline.parameters.default_region >>"
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: /home/circleci/project/.circleci/kub_deploy_files/heroes-service-deployment.yml
          resource-name: deployment/heroes-service
          show-kubectl-command: true
          watch-rollout-status: true
          watch-timeout: 20m
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: /home/circleci/project/.circleci/kub_deploy_files/threats-service-deployment.yml
          resource-name: deployment/threats-service
          show-kubectl-command: true
          watch-rollout-status: true
          watch-timeout: 20m
      - run:
          name: Test cluster
          command: kubectl get svc
      - run:
          name: Get pods
          command: kubectl get pods
      - run:
          name: Get Nodes
          command: kubectl get nodes
      - run: 
          name: Get Deployment
          command: kubectl get deployment
      - run: 
          name: Get Deployed Services
          command: kubectl get services -o wide
      - destroy-eks:
          stack_to_destroy: "<< pipeline.parameters.stack_name >>"
      - delete-ecr:
          repo_to_delete: heroes
          tag_to_delete: "latest"

  
  ########### Cleanup ##############
  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl
      - run:
          name: Get old stack
          command: |
            OLD_STACK=$(curl -H "token: << pipeline.parameters.memstash_token >>" \
               --request GET https://api.memstash.io/values/capstone_hero_oldstack)
            if ! [ -z "$OLD_STACK" ]
            then
              aws cloudformation delete-stack --region "<< pipeline.parameters.default_region >>" --stack-name "$OLD_STACK"
            fi
      - run:
          name: Update memestash with new stack
          command: |
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash_token >>" \
              --request PUT --data "<< pipeline.parameters.stack_name >>" \
                https://api.memstash.io/values/capstone_hero_oldstack


workflows:
  default:
    jobs:
      - deploy-eks-infrastructure

