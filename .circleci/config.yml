version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0


commands:
  destroy-eks:
    description: Destroy eks cluster cloudformation stack
    parameters:
      stack_to_destroy:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy eks cluster "<<parameters.stack_to_destroy>>"
          when: on_fail
          command: |
            aws cloudformation delete-stack --region us-west-2 --stack-name "<<parameters.stack_to_destroy>>"
  delete-ecr:
    description: Delete ecr container
    parameters:
      repo_to_delete:
        type: string
        default: "on_fail"
      tag_to_delete:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Delete ecr container "<<parameters.repo_to_delete>>"
          when: on_fail
          command: |
            aws ecr batch-delete-image --region us-west-2 --repository-name "<<parameters.repo_to_delete>>" --image-ids imageTag="<<parameters.tag_to_delete>>"


jobs:
  ########### Build Heroes Service ###########
  build-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Build Heroes Service
          command: |
            cd heroes
            npm i
      - save_cache:
          paths: [heroes/node_modules]
          key: heroes-build

  ########### Build Threats Service ###########
  build-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Build Threats Service
          command: |
            cd threats
            npm i
      - save_cache:
          paths: [threats/node_modules]
          key: threats-build

  ########### Lint Heroes Service ###########
  lint-heroes-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [heroes-build]
      - run:
          name: Lint Heroes Service
          command: |
            cd heroes
            npm run lint

  ########### Lint Threats Service ###########
  lint-threats-service:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [threats-build]
      - run:
          name: Lint Threats Service
          command: |
            cd threats
            npm run lint
  
  ########### Create and Deploy EKS Infrastructure ############
  deploy-eks-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update zip
      - run:
          name: Deploy EKS cluster
          no_output_timeout: 30m
          command: | 
            aws cloudformation deploy \
              --stack-name "capstone-eks-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file .circleci/iac_files/eks.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region=us-west-2 \
              --capabilities "CAPABILITY_NAMED_IAM"
      - run:
          name: Check status of EKS cluster
          command: |
            aws eks --region us-west-2 describe-cluster \
              --name EKS \
              --query "cluster.status" \
              --output text 
      - run:
          name: Test EKS cluster
          command: |
            aws eks \
              --region us-west-2 update-kubeconfig \
              --name EKS
      - run:
          name: Get cluster endpoint
          command: |
            aws eks describe-cluster \
            --region us-west-2 \
            --name EKS \
            --query "cluster.arn" \
            --output text >>  .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-eks:
          stack_to_destroy: "capstone-eks-${CIRCLE_WORKFLOW_ID:0:7}"
      - delete-ecr:
          repo_to_delete: heroes
          tag_to_delete: "latest-${CIRCLE_BUILD_NUM}"
  
    deploy-service:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: EKS
          install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: .circleci/kub_deploy_files/heroes-service-deployment.yml
            resource-name: deployment/heroes-service
        - destroy-eks:
          stack_to_destroy: "capstone-eks-${CIRCLE_WORKFLOW_ID:0:7}"
        - delete-ecr:
            repo_to_delete: heroes
            tag_to_delete: "latest-${CIRCLE_BUILD_NUM}"
    
    test-deploy-service:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            heroes-service
          type: string
      steps:
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: EKS
        - run:
            name: Test cluster
            command: |
              kubectl get svc
              kubectl get pods
              kubectl describe pods
              kubectl get nodes
              kubectl get deployment
              kubectl describe service heroes-service
              kubectl get services -o wide


workflows:
  default:
    jobs:
      - build-heroes-service
      - build-threats-service
      - lint-heroes-service:
          requires: [build-heroes-service]
      - lint-threats-service:
          requires: [build-threats-service]
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: ./heroes
          region: AWS_REGION
          repo: heroes
          skip-when-tags-exist: false
          tag: "latest-$CIRCLE_BUILD_NUM"
          requires: [lint-heroes-service, lint-threats-service]
      - deploy-eks-infrastructure:
          requires: [aws-ecr/build-and-push-image]
      - deploy-services:
          requires: [deploy-eks-infrastructure]
      - test-deploy-service:
          requires: [deploy-services]
